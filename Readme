# Web-Ларёк

## Используемый стек

* TypeScript
* HTML5
* SCSS (сборка Webpack)
* Webpack
* ООП
* Архитектура MVC (Model-View-Controller)


## Инструкция по сборке и запуску

1. Установите зависимости:


npm install


2. Запустите проект в режиме разработки:


npm run start


3. Соберите проект для продакшена:


npm run build


## Архитектура проекта

### Основные части:

Модели (Model): хранят данные и бизнес-логику
Виды (View): отображают UI и работают с DOM
События (EventEmitter): связывают компоненты

### Взаимодействие реализовано через событийную модель (pub/sub). Контроллером выступает EventEmitter.

## Базовые классы и их назначение

### EventEmitter

Управляет событиями. Используется для обмена данными между независимыми частями приложения.

on(event, callback)` — подписка
emit(event, data)` — публикация
off(event)` — удаление слушателя

### CatalogModel

Хранит список всех доступных товаров и предоставляет доступ к ним.

setProducts(products) — установить список товаров
getProductById(id) — найти товар по ID

### CartModel

Отвечает за корзину пользователя.

add(item)` — добавить товар в корзину
remove(id)` — удалить товар
getItems()` — получить текущие товары
clear()` — очистить корзину

### UserModel

Хранит информацию из формы пользователя (email, телефон, адрес, тип оплаты).


## Компоненты View и их функции

### CatalogView

Отображает список товаров в галерее. Работает с шаблоном карточки. Открывает модальное окно с подробностями при клике.

### CartView

Отображает содержимое корзины, её статус (пустая / заполнена), считает количество товаров.

### UserView

Позволяет извлекать данные из форм на модальных окнах. Сам не валидирует поля, а просто предоставляет доступ к значениям.


## Типы данных

interface IProduct {
  id: string;
  title: string;
  description: string;
  category: string;
  categoryType: 'soft' | 'other' | 'additional' | 'button' | 'hard';
  price: number | string;
  disabled?: boolean;
  image: string;
}

interface ICartItem {
  id: string;
  title: string;
  price: number;
  quantity: number;
}

interface IUserData {
  email: string;
  phone: string;
  address: string;
  payment: 'online' | 'cash';
}


## Дополнительные особенности

Проект реализован на базе стартового шаблона.
Весь доступ к DOM вынесен в отдельный модуль `dom.ts`.
Поддержка модальных окон с блокировкой прокрутки.
Поддержка disabled-товаров (например, "Мамка-таймер" — нельзя купить).
Корзина показывает количество товаров в иконке.
Пустая корзина отображает сообщение "Корзина пуста".
Валидация email и телефона реализована вручную в `index.ts`.